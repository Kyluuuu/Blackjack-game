import java.awt.*;
import java.awt.geom.*;

public class Spade extends Card implements CardDesign{

public Spade(int value, String StringValue, int x, int y) {
    super("Spade", value, StringValue, x, y);
    super.setHouse(this);
}
    @Override
    public void draw(Graphics g, String Pos) {
        int x = super.getLocX();
        int y = super.getLocY();
        if(Pos.equals("TopLeft")) {

        }
        else {

        }
        int s = super.getSize();
        x = x + s/4;
        y = y + s/2;
        double r = s / 4.4;

        Graphics2D g2 = (Graphics2D) g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        Path2D.Double pLeft = new Path2D.Double();
        pLeft.moveTo(x + s/4, y + 2*s/40); 
        pLeft.curveTo(x - s/5.3, y + s/2 - s/6, x + 15*s/80, y + s/2 + s/20, x + s/4, y + s/2 - 2*s/15);

        Path2D.Double pRight = new Path2D.Double();
        pRight.moveTo(x + s/4, y + 2*s/40); 
        pRight.curveTo(x + s/2 + s/5.3, y + s/2 - s/6, x + s/2 - 15*s/80, y + s/2 + s/20, x + s/4, y + s/2 - 2*s/15);


        Path2D.Double pBot = new Path2D.Double();
        pBot.moveTo(x + s/4 - s/30, y + s/2 - 2*s/80); 
        pBot.curveTo(x + s/4 - s/80, y + s/2.2, x + s/4 + s/80, y + s/2.2, x + s/4 + s/30, y + s/2 - 2*s/80);

        Path2D.Double pBotLeft = new Path2D.Double();
        pBotLeft.moveTo(x + s/4 - s/30, y + s/2 - 2*s/80); 
        pBotLeft.curveTo(x + s/4 - s/30, y + s/2 - 2*s/80, x + s/4, y + s/2 - 2*s/15, x + s/4, y + s/2 - 2*s/15);

        Path2D.Double pBotRight = new Path2D.Double();
        pBotRight.moveTo(x + s/4 + s/30, y + s/2 - 2*s/80); 
        pBotRight.curveTo(x + s/4 + s/30, y + s/2 - 2*s/80, x + s/4, y + s/2 - 2*s/15, x + s/4, y + s/2 - 2*s/15);


        

        g2.setColor(Color.black);
        
        g2.setStroke(new BasicStroke(s / 100));

        g2.draw(pBot);
        g2.draw(pBotLeft);
        g2.draw(pBotRight);
        
        g2.fill(pLeft);
        g2.fill(pRight);
    }
   
}

import java.awt.*;
import java.awt.geom.*;

public class Heart extends Card implements CardDesign{

public Heart(int value, String StringValue, int x, int y) {
    super("Heart", value, StringValue, x, y);
    super.setHouse(this);
}
    @Override
    public void draw(Graphics g, String Pos) {
        int x = super.getLocX();
        int y = super.getLocY();
        if(Pos.equals("TopLeft")) {

        }
        else {

        }
        int s = super.getSize();
        x = x + s/4;
        y = y + s/2;
        double r = s / 4.4;

        Graphics2D g2 = (Graphics2D) g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        Path2D.Double pLeft = new Path2D.Double();
        pLeft.moveTo(x + s/4, y + s/2 - 2*s/40); 
        pLeft.curveTo(x - s/5.3, y + s/12, x + 15*s/80, y - s/10, x + s/4, y + 2*s/15);

        Path2D.Double pRight = new Path2D.Double();
        pRight.moveTo(x + s/4, y + s/2 - 2*s/40); 
        pRight.curveTo(x + s/5.3 + s/2, y + s/12, x + s/2 - 15*s/80, y - s/10, x + s/4, y + 2*s/15);

        g2.setColor(Color.red);
        
        g2.setStroke(new BasicStroke(s / 100));

        g2.fill(pLeft);
        g2.fill(pRight);
    }
   
}

import java.awt.*;
import java.awt.geom.*;

public class Club extends Card implements CardDesign{

public Club(int value, String StringValue, int x, int y) {
    super("Club", value, StringValue, x, y);
    super.setHouse(this);
}
    @Override
    public void draw(Graphics g, String Pos) {
        int x = super.getLocX();
        int y = super.getLocY();
        if(Pos.equals("TopLeft")) {

        }
        else {

        }
        int s = super.getSize();
        double r = s / 4.4;

        Graphics2D g2 = (Graphics2D) g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        //g2.drawRect(x, y, s/2, s/2);

        x = x + s/4;
        y = y + s/2;

        Ellipse2D.Double cBotLeft = new Ellipse2D.Double(x + 2*s/80, y + s/4.7, r, r);
        Ellipse2D.Double cTop = new Ellipse2D.Double(x + s/4 - r/2, y + 2*s/80, r, r);
        Ellipse2D.Double cBotRight = new Ellipse2D.Double(x + 2*s/91 + r, y + s/4.7, r, r);
        Ellipse2D.Double cMid = new Ellipse2D.Double(x + s/4 - r/4, y + s/4 - r/4, r/2, r/2);

        Path2D.Double pBot = new Path2D.Double();
        pBot.moveTo(x + s/4 - s/30, y + s/2 - 2*s/80); 
        pBot.curveTo(x + s/4 - s/80, y + s/2.2, x + s/4 + s/80, y + s/2.2, x + s/4 + s/30, y + s/2 - 2*s/80);

        Path2D.Double pBotLeft = new Path2D.Double();
        pBotLeft.moveTo(x + s/4 - s/30, y + s/2 - 2*s/80); 
        pBotLeft.curveTo(x + s/4, y + s/3, x + s/4, y + s/3, x + s/4 - s/50, y + s/4);

        Path2D.Double pBotRight = new Path2D.Double();
        pBotRight.moveTo(x + s/4 + s/30, y + s/2 - 2*s/80); 
        pBotRight.curveTo(x + s/4, y + s/3, x + s/4, y + s/3, x + s/4 + s/50, y + s/4);


        g2.setColor(Color.black);
        
        g2.fill(cMid);
        g2.fill(cTop);
        g2.fill(cBotLeft);
        g2.fill(cBotRight);

        g2.setStroke(new BasicStroke(s / 100));
        g2.draw(pBotLeft);
        g2.draw(pBotRight);
        g2.draw(pBot);
    }
   
}

import java.awt.*;

public class Diamond extends Card implements CardDesign{

public Diamond(int value, String StringValue, int x, int y) {
    super("Diamond", value, StringValue, x, y);
    super.setHouse(this);
}
    @Override
    public void draw(Graphics g, String Pos) {
        int x = super.getLocX();
        int y = super.getLocY();
        if(Pos.equals("TopLeft")) {

        }
        else {

        }
        int s = super.getSize();
        double r = s / 4.4;

        Graphics2D g2 = (Graphics2D) g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        //g2.drawRect(x, y, s/2, s/2);

        x = x + s/4;
        y = y + s/2;

        int[] xP = {x + s/10, x + s/4, x + s/2 - s/10, x + s/4};
        int[] yP = {y + s/4, y + s/100, y + s/4 , y + s/2 - s/100};
        Shape diamond = new Polygon(xP, yP, 4);

        g2.setColor(Color.red);
        g2.fill(diamond);
    }
   
}
